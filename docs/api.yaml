openapi: 3.0.3
info:
  title: RobusTest API
  description: RobusTest API documentation
  contact:
    name: Izinga Software Private Limited
    url: http://robustest.com
    contact: hello@robustest.com
  x-logo:
    url: "https://izinga.github.io/api/logo.png"
    backgroundColor: "#FFFFFF"
    altText: "RobusTest"
  version: 0.1.9
servers:
  - url: http://devicelab.robustest.com
    description: sample api documentation server
securityDefinitions:
  accessKey:
    type: apiKey
    name: accessKey
    in: query
components:
  securitySchemes:
    accesskey:
      type: apiKey
      description: unique access key generated for each user by RobusTest
      name: accessKey
      in: query
security:
  - accessKey: []
tags:
  - name: job
    description: Job methods provide access to job
  - name: setting
    description: Store methods provide access to setting.
  - name: device 
    description: device related apis 
  - name: session
    description: session related apis
  - name: build
    description: build related apis
  - name: upload
    description: upload related apis
  - name: administration
    description: APIs for performing adminstrative tasks
  - name: maintenance
    description: APIs related to device maintenance
  - name: hub - appium
    description: APIs for Appium Hub
  - name: hub - selenium
    description: APIs for Selenium Hub
  - name: proxy
    description: proxy related APIs
  - name: mitm
    description: mitm related APIs
  - name: roku
    description: roku related APIs
paths:

  /v3/result/<resultID>/performance:
    get:
      $ref: "components/performance/performance.yaml#/performance_get"

  /v3/job/{job_identifier}:
    delete:
      $ref: "components/job/job.yaml#/Stop_Job_Delete"

  /v3/device/add:
    post:
      $ref: "components/roku/roku.yaml#/Add_Device_Post"
  
  /v3/sessions:
    get:
      summary: get a list of all the test sessions for a given time period
      tags:
        - session
    parameters:
      - name: start
        in: query
        required: true
        description: start time for fetching the session list in the format mm-dd-yyyy:hh:mm:ss
      - name: end
        in: query
        required: true
        description: end time for fetching the session list in the format mm-dd-yyyy:hh:mm:ss
    responses:
      '200':
        description: session details based on duration given
        
  /v3/mitmproxy/testsession/{testsessionID}:
    get:
      summary: Deprecated - fetch network request details based on test session ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: testsessionID
          in: path
          required: true
          description: the test session ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /v3/testsession/{testsessionID}/mitmproxy:
    get:
      summary: fetch network request details based on test session ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: testsessionID
          in: path
          required: true
          description: the test session ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /v3/mitmproxy/seleniumSessionID/{appiumid}:
    get:
      summary: Deprecated - fetch network request details based on appium or selenium session ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: appiumid
          in: path
          required: true
          description: the appium session ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /v3/appium/{appiumid}/mitmproxy:
    get:
      summary: fetch network request details based on appium or selenium session ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: appiumid
          in: path
          required: true
          description: the appium session ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /v3/mitmproxy/result/{resultID):
    get:
      summary: Deprecated - fetch network request details based on appium or selenium session ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: resultID
          in: path
          required: true
          description: the result ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /v3/result/{resultID}/mitmproxy:
    get:
      summary: fetch network request details based on result ID
      tags:
        - proxy
        - mitm
      parameters:
        - name: resultID
          in: path
          required: true
          description: the result ID
          schema:
            type: string
      responses:
        '200':
          description: MITM request details

  /admin/v3/maintenance/{Maintenance_Profile_ID}/run:
    post:
      $ref: "components/admin/maintenance/maintenance.yaml#/Maintenance_Profile_Post"

  /grid/browsers:
    get:
      $ref: "components/hub/grid.yaml#/Grid_browsers_Get"

  /grid/nodes:
    get:
      $ref: "components/hub/grid.yaml#/Grid_nodes_Get"

  /hub/sessionIdentifier/{robustestSessionIdentifier}:
    get:
      $ref: "components/hub/hub.yaml#/Hub_robustestSessionIdentifer_Get"

  /hub/sessionIdentifier/{AppiumSessionID}:
    get:
      $ref: "components/hub/hub.yaml#/Hub_AppiumSessionID_Get"

  /v3/devices:
    get:
      $ref: "components/device/device.yaml#/Devices_Get"

  /v3/device/{deviceID}:
    get:
      $ref: "components/device/device.yaml#/Device_Get"

  /v3/device/uninstall:
    post:
      $ref: "components/device/device.yaml#/Device_Uninstall_Post"
  /v3/job/{robustestJobIdentifier}:
    get:
      summary: fetch job details of an Appium Hub run using the user-specified robustestJobIdentifier
      tags:
        - hub - appium
      parameters:
        - name: robustestJobIdentifier
          in: path
          required: true
          description: the string value provided by user to uniquely identify the RobusTest job
          schema:
            type: string
      responses:
        '200':
          description: RobusTest Job Details
  /v3/hub/sessionIdentifer/{robustestSessionIdentifier}:
    get:
      summary: fetch test session details of an Appium Hub session using the user-specified robustestSessionIdentifier
      tags:
        - hub - appium
      parameters:
        - name: robustestSessionIdentifier
          in: path
          required: true
          description: the string value provided by user to uniquely identify the appium session
          schema:
            type: string
      responses:
        '200':
          description: RobusTest Session Details
  /v3/hub/session/{appiumSessionID}:
    get:
      summary: fetch test session details of an Appium Hub session using the Appium Session ID
      tags:
        - hub - appium
      parameters:
        - name: appiumSessionID
          in: path
          required: true
          description: the unique session identifier generated by Appium
          schema:
            type: string
      responses:
        '200':
          description: RobusTest Session Details
  /v3/job/{RobustestJobID}/testsessions:
    get:
      summary: fetch all the test sessions belonging a specific RobusTest job ID
      tags:
        - hub - appium
      parameters:
        - name: RobustestJobID
          in: path
          required: true
          description: the unique job identifier generated by RobusTest
          schema:
            type: string
      responses:
        '200':
          description: RobusTest Session List and Details for a job
  
  /v3/project/{projectID}/build:
    $ref: "components/build/build.yaml#/build_upload_put"

  /v3/project/{project_ID}/build/ref:
    $ref: "components/build/build.yaml#/build_upload_ref_post"

  /v3/build/{buildID}:
    $ref: "components/build/build.yaml#/build_modify_put"
          
  /v3/jobs/{projectID}:
    get:
      summary: List all job
      operationId: listJobs
      tags:
        - job
      parameters:
        - name: projectID
          in: path
          required: true
          description: The id of the project for which we need to list job
          schema:
            type: string
        - name: count
          in: query
          description: How many items to return at one time
          required: false
          schema:
            type: number
        - name: cursor
          in: query
          description: cursor 
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paged array of jobs
          content:
           application/json; charset=utf-8:
             schema:
              type: object
              required:
               - cursor
               - jobs
               - totalCount
              properties:
                cursor:
                  type: string
                totalCount:
                  type: number
                jobs: 
                  type: array
                  items:
                   $ref: "components/job/job.yaml#/Job"

  /v3/testsession/{testSessionID}:
    get:
      summary: Get test session details
      tags:
        - session
      parameters:
        - name: testSessionID
          in: path
          required: true
          description: the test session ID generated by RobusTest
          schema:
            type: string
  
  /v3/job/{jobID}:
    get:
      summary: Info for a specific job
      operationId: getJobByID
      tags:
        - job
      parameters:
        - name: jobID
          in: path
          required: true
          description: The id of the job to retrieve
          schema:
            type: string
      responses:
        '200':
          description: job
          content:
            application/json:
              schema:
                $ref: "components/job/job.yaml#/Job"
    delete:
      summary: Stop a job that is running
      tags:
        - job
      parameters:
        - name: jobID
          in: path
          required: true
          description: ID of the job that you want to stop
          schema:
            type: string
      responses:
        '200':
          description: job closed successfully

  /v3/job/{jobID}/runs:
    get:
      summary: Get all runs for given job 
      operationId: getRunsJobByID
      tags:
        - job
      parameters:
        - name: jobID
          in: path
          required: true
          description: The id of the job to retrieve
          schema:
            type: string
      responses:
        '200':
          description: list of runs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "components/run.yaml#/Run"
  /v3/job/{jobID}/instances:
    get:
      summary: Get all instances for given job 
      operationId: getInstancesJobByID
      tags:
        - job
      parameters:
        - name: jobID
          in: path
          required: true
          description: The id of the job to retrieve
          schema:
            type: string
      responses:
        '200':
          description: list of instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "components/instance.yaml#/Instance"
  /v3/job/{jobID}/testcases:
    get:
      summary: Get all testcases for given job 
      operationId: gettTestcasesJobByID
      tags:
        - job
      parameters:
        - name: jobID
          in: path
          required: true
          description: The id of the job to retrieve
          schema:
            type: string
      responses:
        '200':
          description: list of testcases
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "components/testcase.yaml#/Testcase"  
  /v3/job/new:
    post:
      summary: Create a new job on RobusTest. One API to rule them all.
      tags:
        - job
        - create
      description: Unified API used for creating an automation job on RobusTest. Whatever be your job type - this is the API to kickstart it
      requestBody:
        description: The payload to be sent
        required: true
        content: 
          application/json:
            schema:
              $ref: "components/createJob/jobRequestPayload.yaml#/JobRequestPayload"
            examples: 
              prod:
                value:
                  identifier: Prod Build Nightly Test
      responses:
        $ref: "components/createJob/jobResponse.yaml#/ResponseList"
  
  /v3/appium/testcase/{appium_session_id}:
    post:
      summary: Updating the test case run as part of Appium Hub
      tags:
        - hub
        - appium
      description: API to update the test case details of Appium test
      parameters:
        - name: appium_session_id
          in: path
          required: true
          description: The Appium session ID
          schema:
            type: string
      requestBody:
        description: Payload for this API
        required: true
        content:
          application/json:
            schema: 
              $ref: "components/appium_hub/AppiumHubRequest.yaml#/AppiumHubPayload"    
               
  /v3/appium/{appium_session_id}/testcase:
    post:
      summary: Creating the test case run as part of Appium Hub
      tags:
        - hub 
        - appium
      description: API to create the test case from an Appium test session
      parameters:
        - name: appium_session_id
          in: path
          required: true
          description: The Appium session ID
          schema:
            type: string
      requestBody:
        description: Payload for this API
        required: true
        content:
          application/json:
            schema: 
              $ref: "components/appium_hub/AppiumHubRequest.yaml#/AppiumHubPayload"
    put:
      summary: Update the Appium test case. If Status value is passed, the test case is considered closed.
      tags:
        - hub 
        - appium
      description: API to update or complete the test case details of Appium test
      parameters:
        - name: appium_session_id
          in: path
          required: true
          description: The Appium session ID
          schema:
            type: string
      requestBody:
        description: Payload for this API
        required: true
        content:
          application/json:
            schema: 
              $ref: "components/appium_hub/AppiumHubRequest.yaml#/AppiumHubEndTestCasePayload"
  /v3/testcase/{testcaseID}:
    get:
      summary: Info for a specific testcase
      operationId: gettTestcaseByID
      tags:
        - job
      parameters:
        - name: testcaseID
          in: path
          required: true
          description: The id of the testcase to retrieve
          schema:
            type: string
      responses:
        '200':
          description: testcase
          content:
            application/json:
              schema:
                $ref: "components/testcase.yaml#/Testcase"
  /v3/testcase/{testcaseID}/results:
    get:
      summary: Get all results for given testcase 
      operationId: gettResultByTestcaseID
      tags:
        - job
      parameters:
        - name: testcaseID
          in: path
          required: true
          description: The id of the testcase to retrieve
          schema:
            type: string
      responses:
        '200':
          description: list of results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "components/result.yaml#/Result"
  /v3/result/{resultID}:
    get:
      summary: Info for a specific result
      operationId: gettResultByID
      tags:
        - job
      parameters:
        - name: resultID
          in: path
          required: true
          description: The id of the result to retrieve
          schema:
            type: string
      responses:
        '200':
          description: result
          content:
            application/json:
              schema:
                $ref: "components/result.yaml#/Result"
  /v3/log/{resultID}/result:
    get:
      summary: get test framework log for specific result
      operationId: gettFrameworlLogByResultID
      tags:
        - job
      parameters:
        - name: resultID
          in: path
          required: true
          description: The id of the result 
          schema:
            type: string
      responses:
        '200':
          description: log
          content:
            application/json:
              schema:
                $ref: "components/log.yaml#/Log"
  /v3/log/{resultID}/device:
    get:
      summary: get test device log for specific result
      operationId: gettDeviceLogByResultID
      tags:
        - job
      parameters:
        - name: resultID
          in: path
          required: true
          description: The id of the result 
          schema:
            type: string
      responses:
        '200':
          description: log
          content:
            application/json:
              schema:
                $ref: "components/log.yaml#/Log"
  /v3/device/{device_ID}/reserve:
    put:
      summary: reserve device
      tags:
        - device
      description: reserve a device so that it is kept for you
      parameters:
        - name: device_ID
          in: path
          required: true
          description: The id of the device 
          schema:
            type: string
      requestBody:
        description: the payload for reserve API
        required: true
        content:
          application/json:
            schema:
              $ref: "components/device/reserve.yaml#/ReservePayload"
      responses:
        '200':
          description: device
          content:
            application/json:
              schema:
                $ref: "components/device/device.yaml#/Device"
    delete:
      summary: unreserve device
      description: unreserve device
      operationId: unreserveDevice
      tags:
        - device
      responses:
        '200':    # status code
          description: device 
          schema:
              $ref: "components/device/device.yaml#/Device"
